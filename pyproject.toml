[project]
name = "igniteai-lens-service"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "alembic>=1.17.0",
    "pydantic-settings>=2.11.0",
    "pydantic>=2.12.0",
    "sqlalchemy>=2.0.44",
    "fastapi>=0.119.0",
    "uvicorn>=0.37.0",
    "asyncpg>=0.30.0",
    "structlog>=25.4.0",
    "greenlet>=3.2.4",
    "opentelemetry-api>=1.36.0",
    "opentelemetry-sdk>=1.36.0",
    "opentelemetry-instrumentation-fastapi>=0.57b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.57b0",
    "opentelemetry-instrumentation-redis>=0.57b0",
    "opentelemetry-exporter-prometheus>=0.57b0",
    "prometheus-client>=0.22.1",
    "pre-commit>=4.3.0",
    "opentelemetry-instrumentation>=0.57b0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.36.0",
    "ujson>=5.10.0",
    "aiosqlite>=0.21.0",
    "opentelemetry-instrumentation-logging>=0.57b0",
    "aioboto3>=15.1.0",
    "boto3>=1.35.0",
    "aiomysql>=0.2.0",
    "requests>=2.32.5",
    "mypy>=1.17.1",
    "types-ujson>=5.10.0.20250822",
    "aiofiles>=24.1.0",
    "duckdb>=1.4.1",
    "redis>=6.4.0",
    "cryptography>=46.0.2",
    "passlib[bcrypt]>=1.7.4",
    "portkey-ai>=2.0.0",
    "pandas>=2.3.3",
    "langgraph>=1.0.1",
    "langchain-openai>=1.0.1",
    "sqlglot>=27.28.1",
]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 130
indent-width = 4
target-version = "py312"


[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "N",  # PEP8 naming convetions
    "D",  # pydocstyle
]

ignore = [
    "B008",
    "C901", # too complex
    "W191", # indentation contains tabs
    "D401", # imperative mood
    "D104",
    "D100",
    "D103",
    "D101",
    "D205",
    "D105",
    "D107",
    "D102",
    "N802",
    "N805",
]

fixable = ["ALL"]
unfixable = ["B"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests (requires external services)",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov=api",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=60"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["core", "api"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*"
]

[dependency-groups]
dev = [
    "debugpy>=1.8.16",
    "locust>=2.40.1",
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "ruff>=0.12.9",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.15.1",
    "httpx>=0.28.1",
]
